//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;

namespace Cfg.Single
{
   
public partial class GameText
{

     private readonly Single.Table_GameText _data;

    public GameText(ByteBuf _buf)
    {
        int n = _buf.ReadSize();
        if (n != 1) throw new SerializationException("table mode=one, but size != 1");
        _data = Single.Table_GameText.DeserializeTable_GameText(_buf);
        PostInit();
    }


     public string AbilityUsingResult_NoTarget => _data.AbilityUsingResult_NoTarget;
     public string AbilityUsingResult_NoCastor => _data.AbilityUsingResult_NoCastor;
     public string AbilityUsingResult_NotEnoughMana => _data.AbilityUsingResult_NotEnoughMana;
     public string AbilityUsingResult_NotReady => _data.AbilityUsingResult_NotReady;
     public string AbilityUsingResult_NoParam => _data.AbilityUsingResult_NoParam;
     public string AbilityUsingResult_NoMeta => _data.AbilityUsingResult_NoMeta;
     public string AbilityUsingResult_NoTimeline => _data.AbilityUsingResult_NoTimeline;

    public void Resolve(Dictionary<string, object> _tables)
    {
        _data.Resolve(_tables);
        PostResolve();
    }

    public void TranslateText(System.Func<string, string, string> translator)
    {
        _data.TranslateText(translator);
    }

    
    partial void PostInit();
    partial void PostResolve();
}

}